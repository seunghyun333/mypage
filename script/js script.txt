// window.alert(x) : 경고창을 띄워 x를 출력해라!
window.console.log('박승현') 콘솔에 로그(기록한다)

기능(메소드)뒤에는 ( )  붙이기

console.clear( ) : 콘솔 내용 다 지우기 

문자열- 자료형
console.log("감사")

상수의 선언 시 초기화를 동시에 해줘야함 
const 상수이름 = 데이터 ; 

window.promt( ) => 다이얼로그 만드는 메소드 
입력받은 문자열을 사용된 곳에 그대로 반환한다. 실제로 바뀐건 아니고 실행된다는 의미 

const promptmessage ="프롬포트에 표시할 문자열"
const result = prompt(promptmessage)
console.log(result)

${ } : 플레이스홀더

null: 없다
undefined: 아직 데이터가 정의되지 않음 
boolean: true, false 참 거짓 여부를 나타내기 위해 사용하는 데이터 소문자로 써야됨 

const h1 = document.querySelector("h1") : 선택자를 인자로 전달 받음 
const p = document.getElementById("text") : id만 인자로 전달 받음 

.textContent : 요소의 글자만 확인 하고 바꾸기도 가능 
console.log(h1.textContent)
h1.textContent="헬로우 여러분!!"

등가비교 
같다: == (추상적 )
같지않다: !=
완전히 같다 === ( 엄격한)
완전히 같지 않다 !==

비교연산자를 이용하면 대소 및 등가비교를 수행할 수 있다.
비교 연산식은 언제나 boolean 데이터를 반환한다.
이퀄 하나는 대입 연산자를, 두 개부터는 비교 연산자 역할을 담당한다.
등가 비교에는 추상적 비교와 엄격한 비교가 각각 존재한다. 

반복문은 비슷하거나 동일한 구문을 반복해서 수행할 수 있는 구문 
while 은 주어진 조건이 true일때 반복하는 구문 , false 될때까지 구문 반복 
반복 구문은 루프라고 한다. 

for 문은 초기식 , 조건식, 반복식으로 반복 횟수를 명시적으로 표현할 수 있다. 
for (let i = 8; i >=1; i -=2) { console.log(i)  }

sayBye()

function sayHello(){ // 선언식 - 호출문이 선언식보다 먼저 나와도 됨 = 호이스트 가능하다
    console.log("Hello")
    console.log("Hi")
    console.log("안녕")
}

const sayBye = function(){ //표현식
    console.log("good bye~~")
}